@page "/add-customer"
@using GrainBroker.Entities
@using GrainBroker.Frontend.Models
@using Microsoft.AspNetCore.Components.Forms
@inject CustomerHttpClient CustomerClient

<div class="container">
    <div class="content-wrapper">
        <h2 class="mb-4">Customer Management</h2>

        <div class="row">
            <div class="col-md-4">
                <div class="card">
                    <div class="card-header">
                        <h5 class="mb-0">Add New Customer</h5>
                    </div>
                    <div class="card-body">
                        <EditForm Model="@model" OnValidSubmit="@HandleValidSubmit">
                            <DataAnnotationsValidator />

                            <div class="mb-3">
                                <label for="customerName" class="form-label">Customer Name</label>
                                <InputText id="customerName" class="form-control" @bind-Value="model.CustomerName" />
                                <ValidationMessage For="@(() => model.CustomerName)" />
                            </div>

                            <div class="mb-3">
                                <label for="location" class="form-label">Location</label>
                                <InputText id="location" class="form-control" @bind-Value="model.Location" />
                                <ValidationMessage For="@(() => model.Location)" />
                            </div>

                            <button type="submit" class="btn btn-primary w-100" disabled="@model.IsSubmitting">
                                @if (model.IsSubmitting)
                                {
                                    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                    <span>Saving...</span>
                                }
                                else
                                {
                                    <span>Add Customer</span>
                                }
                            </button>
                        </EditForm>

                        @if (!string.IsNullOrEmpty(model.ErrorMessage))
                        {
                            <div class="alert alert-danger mt-3" role="alert">
                                @model.ErrorMessage
                            </div>
                        }
                    </div>
                </div>
            </div>

            <div class="col-md-8">
                <div class="card">
                    <div class="card-header">
                        <div class="d-flex justify-content-between align-items-center">
                            <h5 class="mb-0">Existing Customers</h5>
                            <button class="btn btn-sm btn-outline-primary" @onclick="RefreshCustomers">
                                <span class="oi oi-reload"></span> Refresh
                            </button>
                        </div>
                    </div>
                    <div class="card-body">
                        @if (customers == null)
                        {
                            <div class="text-center py-3">
                                <div class="spinner-border text-primary" role="status">
                                    <span class="visually-hidden">Loading...</span>
                                </div>
                            </div>
                        }
                        else if (!customers.Any())
                        {
                            <div class="alert alert-info">
                                No customers found. Add your first customer using the form.
                            </div>
                        }
                        else
                        {
                            <div class="table-responsive">
                                <table class="table table-striped table-hover">
                                    <thead>
                                        <tr>
                                            <th>Customer Name</th>
                                            <th>Location</th>
                                            <th>Created Date</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var customer in customers)
                                        {
                                            <tr>
                                                <td>@customer.CustomerName</td>
                                                <td>@customer.CustomerLocation</td>
                                                <td>@customer.Status</td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    .content-wrapper {
        padding-top: 5rem;
        padding-bottom: 2rem;
    }

    .card {
        box-shadow: 0 2px 4px rgba(0,0,0,0.05);
    }

    .table th {
        background-color: #f8f9fa;
    }

    .table-hover tbody tr:hover {
        background-color: #f1f3f5;
    }
</style>

@code {
    private CustomerModel model = new();
    private IEnumerable<Customer>? customers;

    protected override async Task OnInitializedAsync()
    {
        await LoadCustomers();
    }

    private async Task LoadCustomers()
    {
        try
        {
            customers = await CustomerClient.GetAllCustomersAsync();
        }
        catch (Exception ex)
        {
            model.ErrorMessage = $"Error loading customers: {ex.Message}";
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            model.IsSubmitting = true;
            model.ErrorMessage = null;

            var request = model.ToCreateCustomerRequest();
            await CustomerClient.CreateCustomerAsync(request);

            // Reset the form
            model.Reset();

            // Refresh the customer list
            await LoadCustomers();
        }
        catch (Exception ex)
        {
            model.ErrorMessage = $"Error adding customer: {ex.Message}";
        }
        finally
        {
            model.IsSubmitting = false;
        }
    }

    private async Task RefreshCustomers()
    {
        await LoadCustomers();
    }
}