@page "/place-order"
@using Microsoft.AspNetCore.Components.Forms
@using GrainBroker.Entities
@using GrainBroker.Frontend.Models
@inject CustomerHttpClient CustomerClient
@inject OrderHttpClient OrderClient
@inject NavigationManager NavigationManager

<PageTitle>Place Order - Grain Broker System</PageTitle>

<div class="container mt-4">
    <h3>Place New Order</h3>

    <EditForm FormName="placeOrder" Model="@model" OnValidSubmit="@HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <label for="customer" class="form-label">Select Customer:</label>
            <InputSelect id="customer" class="form-select" @bind-Value="model.CustomerId">
                <option value="">Select a customer...</option>
                @if (customers != null)
                {
                    @foreach (var customer in customers)
                    {
                        <option value="@customer.Id">@customer.CustomerName</option>
                    }
                }
            </InputSelect>
            <ValidationMessage For="@(() => model.CustomerId)" />
        </div>

        <div class="mb-3">
            <label for="amount" class="form-label">Grain Amount (tons):</label>
            <InputNumber id="amount" class="form-control" @bind-Value="model.RequestedGrainAmount" />
            <ValidationMessage For="@(() => model.RequestedGrainAmount)" />
        </div>

        <div class="d-grid gap-2">
            <button type="submit" class="btn btn-primary btn-lg" disabled="@model.IsSubmitting">
                @if (model.IsSubmitting)
                {
                    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                    <span>Processing...</span>
                }
                else
                {
                    <span>Place Order</span>
                }
            </button>
        </div>

        @if (!string.IsNullOrEmpty(model.ErrorMessage))
        {
            <div class="alert alert-danger mt-3" role="alert">
                @model.ErrorMessage
            </div>
        }
    </EditForm>
</div>

@code {
    private OrderModel model = new();
    private IEnumerable<Customer>? customers;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            customers = await CustomerClient.GetAllCustomersAsync();
        }
        catch (Exception ex)
        {
            model.ErrorMessage = $"Error loading customers: {ex.Message}";
        }
    }

    private async Task HandleValidSubmit()
    {
        if (model.CustomerId == Guid.Empty)
        {
            model.ErrorMessage = "Please select a customer";
            return;
        }

        try
        {
            model.IsSubmitting = true;
            model.ErrorMessage = null;

            var orderRequest = model.ToCreateOrderRequest();
            var order = await OrderClient.CreateOrderAsync(orderRequest);
            
            if (order != null)
            {
                NavigationManager.NavigateTo($"/order/{order.OrderId}");
            }
            else
            {
                model.ErrorMessage = "Failed to create order. Please try again.";
            }
        }
        catch (Exception ex)
        {
            model.ErrorMessage = $"Error submitting order: {ex.Message}";
        }
        finally
        {
            model.IsSubmitting = false;
        }
    }
}
